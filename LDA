{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"LDA","private_outputs":true,"provenance":[],"authorship_tag":"ABX9TyNiUgmmpo6xQscAHUVGCRt/"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"ORldZAGTlWQp"},"source":["TCC MARCOS ANTONIO DA SILVA NASCIMENTO\n","ORIENTADOR: ANIBAL SANTOS JUKEMURA\n","\n","ALGORITMO LDA\n","\n","*OS TESTES REALIZADOS FORAM FEITOS COM OS ARQUIVOS NO GOOGLE DRIVE. PARA UPLOAD REALIZADOS DIRETO DA MÁQUINA ALGUMAS VERSÕES DE NAVEGADORES PODEM APRESENTAR INCOMPATIBILIDADE OU ALGUM OUTRO TIPO DE PROBLEMA."]},{"cell_type":"markdown","metadata":{"id":"3OAvFXnGdgwU"},"source":["##Inicio\n"]},{"cell_type":"code","metadata":{"id":"jiA9jjZmXzTD"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"JYRMPepXjob7"},"source":["#upload de arquivos\n","#from google.colab import files\n","#uploaded = files.upload()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"upsu2xT9j10P"},"source":["#upload de arquivos\n","#from google.colab import files\n","#uploaded = files.upload()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"6oQybt3tayqx"},"source":["!python -m pip install -U pyLDAvis==2.1.2 #as versões mais novas do pyLDAvis não funcionam bem no colab"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"8fLUwlLMX5S4"},"source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","import seaborn as sns\n","\n","#Import non-standard packages\n","from gensim import corpora\n","from gensim.models.ldamodel import LdaModel\n","#import ptLDAvis\n","\n","import io\n","import unicodedata\n","import string\n","import nltk\n","nltk.download('stopwords')\n","nltk.download('wordnet')\n","nltk.download('punkt')\n","nltk.download('averaged_perceptron_tagger')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Zcl6kfTsdWER"},"source":["#Carregar a biblioteca sklearn junto com o método CountVectorizer\n","\n","from sklearn.feature_extraction.text import CountVectorizer\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.cluster import KMeans"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"iHhA-K8uYC_l"},"source":["#Leitura do google drive (testes feitos desta maneira)\n","data = pd.read_csv('/content/drive/My Drive/chat1.csv', encoding= 'utf-8', sep = ',')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"7oJ3EDkGkC-k"},"source":["#Leitura do arquivo para upload da máquina\n","#data = pd.read_csv(io.BytesIO(uploaded['chat1.csv']))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"2mmYH3TqWKFO"},"source":["filtro  = data['match_id'] < 1611\n","data = data[filtro]\n","data"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"cDGfkRRhrLA_"},"source":["#Leitura do google drive (testes feitos desta maneira)\n","emocao = pd.read_csv('/content/drive/My Drive/base.csv', encoding= 'utf-8', sep = ',')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"eRobfocakX_e"},"source":["#Leitura do arquivo para upload da máquina\n","#emocao = pd.read_csv(io.BytesIO(uploaded['emocao.csv']))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-LbKjAXPbS52"},"source":["##Limpando data"]},{"cell_type":"code","metadata":{"id":"90mvV4LHbYFe"},"source":["#Fazendo com que toda a coluna de chat fique em formato string (mantendo o chat original p/ caso precise)\n","data['chat'] = data['key'].apply(str)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"7jY7vgldbUA6"},"source":["#Lower case - letra minuscula\n","data['chat'].str.lower()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"mA09ltrGbZq6"},"source":["#Carregando BIBLIOTECA DE EXPRESSÕES REGULARES para retirada de pontuação\n","\n","import re\n","\n","#pontuação\n","data['chat'] = data['chat'].map(lambda x:re.sub('[,\\.!?]', '', str(x)))\n","data['chat'] = data['chat'].map(lambda x:re.sub(r'\\s+', ' ', str(x)))\n","data['chat'] = data['chat'].map(lambda x:re.sub('[^a-zA-Z]', ' ', str(x)))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"_wpI6bgXbiK0"},"source":["#criando uma lista de stopwords\n","stopwords = nltk.corpus.stopwords.words('english')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"C8PfISfMbwvq"},"source":["#removendo algumas colunas\n","data = data.drop(columns=['slot', 'time'], axis=1)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"JQllO2H8byEB"},"source":["data_list = data.chat.tolist() #transformando o df em uma lista"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"voHYJrVCdtv5"},"source":["#data_list"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"vt5PZA5Jb-FQ"},"source":["# Limpar tudo entre \"<...>\" e criar um dataframe \n","data_list_frame = pd.DataFrame([re.sub('<.*>', '', str(data_list[i])) for i in range(len(data_list))], columns=['text'])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"uls7sA_ycgDO"},"source":["#def para remoção de sw\n","def removesw (frases):\n","  frase= []\n","  for palavras in frases:\n","    semsw = [p for p in palavras.split() if p not in stopwords]\n","    frase.append((semsw))\n","  return frase"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"okxgPXJccsy9"},"source":["data_list = removesw(data_list)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"YUM-rigGdYyk"},"source":["#data_list"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"w32_SoVmc9c4"},"source":["##WordCloud"]},{"cell_type":"code","metadata":{"id":"2d6N4F10cxdl"},"source":["#Importando biblioteca wordcloud\n","\n","from wordcloud import WordCloud"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"H046FOvFc_jj"},"source":["nuvem_list = ','.join(list(str(p) for p in data_list))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"DA8HSLNFdBvz"},"source":["#Criando objeto da nuvem\n","nuvemWC = WordCloud(background_color=\"white\", max_words=5000, contour_width=3, contour_color='steelblue', height= 500, width= 1000)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"BqbiiXlZdS0Z"},"source":["#Gerando a nuvem\n","nuvemWC.generate(nuvem_list)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"7edyAUbkdU2Z"},"source":["#Visualizando nuvem\n","nuvemWC.to_image()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Uq6cy2d_eL8I"},"source":["##top palavras\n"]},{"cell_type":"code","metadata":{"id":"0VP0xMfFeTZd"},"source":["import seaborn as sns\n","sns.set_style('whitegrid')\n","%matplotlib inline"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"tZpjfzhPeWD8"},"source":["# Devido o Plotly estar sendo utilizado no Google Collab, precisaremos definir\n","# a função abaixo e chamá-la sempre que quisermos exibir um gráfico\n","\n","def configure_plotly_browser_state():\n","  import IPython\n","  display(IPython.core.display.HTML('''\n","        <script src=\"/static/components/requirejs/require.js\"></script>\n","        <script>\n","          requirejs.config({\n","            paths: {\n","              base: '/static/base',\n","              plotly: 'https://cdn.plot.ly/plotly-1.5.1.min.js?noext',\n","            },\n","          });\n","        </script>\n","        '''))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"U_NRdxGJeY6c"},"source":["# funçao\n","def top10palavras(count_data, count_vectorizer):\n","    import matplotlib.pyplot as plt\n","    palavras = count_vectorizer.get_feature_names()\n","    total_counts = np.zeros(len(palavras))\n","    for t in count_data:\n","        total_counts+=t.toarray()[0]\n","    \n","    count_dict = (zip(palavras, total_counts))\n","    count_dict = sorted(count_dict, key=lambda x:x[1], reverse=True)[0:10]\n","    palavras = [w[0] for w in count_dict]\n","    counts = [w[1] for w in count_dict]\n","    x_pos = np.arange(len(palavras)) \n","    \n","    plt.figure(2, figsize=(15, 15/1.6180))\n","    plt.subplot(title='10 most common palavras')\n","    sns.set_context(\"notebook\", font_scale=1.25, rc={\"lines.linewidth\": 2.5})\n","    sns.barplot(x_pos, counts, palette='husl')\n","    plt.xticks(x_pos, palavras, rotation=90) \n","    plt.xlabel('palavras')\n","    plt.ylabel('counts')\n","    plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"tErtqCy-ebMU"},"source":["count_vectorizer = CountVectorizer(stop_words='english')\n","# Ajustar e transformar os títulos processados \n","count_data = count_vectorizer.fit_transform(data['chat'])\n","# Visualizar as 10 palavras mais frequentes\n","top10palavras(count_data, count_vectorizer)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"I5tx7JjpgkCU"},"source":["#Visualização dados LDA"]},{"cell_type":"code","metadata":{"id":"u42tQqlbnkQT"},"source":["##Compilação abaixo demora bastante**"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"U1CYMhaleeRb"},"source":["import warnings\n","warnings.simplefilter(\"ignore\", DeprecationWarning)\n","# Carregando o LDA model do sk-learn\n","from sklearn.decomposition import LatentDirichletAllocation as LDA\n"," \n","# função que fará um loop sobre os componentes do modelo LDA para encontrar as maiores semelhanças\n","def print_topics(model, count_vectorizer, n_top_words):\n","    words = count_vectorizer.get_feature_names()\n","    for topic_idx, topic in enumerate(model.components_):\n","        print(\"\\nTopic #%d:\" % topic_idx)\n","        print(\" \".join([words[i]\n","                        for i in topic.argsort()[:-n_top_words - 1:-1]])) # busca as palavras correspondentes no CountVectorizer\n","        \n","# Ajuste dos dois parametros\n","number_topics = 2\n","number_words = 15\n","# Criação e ajuste do modelo\n","lda = LDA(n_components=number_topics, n_jobs=-1)\n","lda.fit(count_data)\n","# Print dos tópicos encontrados pelo LDA\n","print(\"Topics found via LDA:\")\n","print_topics(lda, count_vectorizer, number_words)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"FkVGnf28gxJp"},"source":["from pyLDAvis import sklearn as sklearn_lda\n","import pickle \n","import pyLDAvis\n","import os\n","import base64\n","LDAvis_data_filepath = os.path.join('./ldavis_prepared_'+ str(number_topics))\n","\n","#Como demora um tempo de execução, mudar o if pra false\n","if 1 == 1:\n","  LDAvis_prepared = sklearn_lda.prepare(lda, count_data, count_vectorizer)\n","with open(LDAvis_data_filepath, 'wb') as f:\n","  pickle.dump(LDAvis_prepared, f)\n","        \n","# carregar os dados pyLDAvis pré-processados do disco \n","with open(LDAvis_data_filepath, 'rb') as f:\n","  LDAvis_prepared = pickle.load(f)\n","\n","pyLDAvis.save_html(LDAvis_prepared, './ldavis_prepared_'+ str(number_topics) +'.html')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZDJHwxCloqu9"},"source":["pyLDAvis.display(LDAvis_prepared)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"PHFImT44uHIP"},"source":["# Grafico LDA"]},{"cell_type":"code","metadata":{"id":"hH6RquNW8fB5"},"source":["topicos = {'topic0':['gg', 'ez', 'game', 'mid', 'haha', 'nice', 'fuck', 'end', 'dont', 'guys', 'commend', 'good', 'wtf', 'rofl', 'mmr'], 'topic1':['lol', 'wp', 'report', 'team', 'xd', 'ggwp', 'ty', 'pls', 'noob', 'just', 'fucking', 'shit', 'sf', 'like', 'ur']}"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"FvIbvcwCtRMs"},"source":["#função para contar palavras\n","def count_word(word, text):\n","  counter = 0\n","  for word in word:\n","    for p in text.split():\n","      if word == p:\n","        counter+=1\n","  return counter"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Gu1MQXmOubBo"},"source":["# Função para classificar cada frase em um tópico, verificando o tópico que contém mais palavras.\n","# Para cada frase, cria um dicionário {topic: qtd words da lista} e depois verifica qual é a chave no dicionário com o maior número, que será o número do tópico a ser adicionado a uma lista e devolvido.\n","\n","def assign_topic(topic, text):\n","    assign = []\n","    for row in text:\n","        topic_counts = {}\n","        for key, value in topic.items():\n","            topic_counts[key] = count_word(value, row) #use function previously created\n","        assign.append(max(topic_counts, key=lambda k: topic_counts[k]))\n","    return assign"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"9RgiTy6K85av"},"source":["# A lista de tópicos que irão no dataframe\n","topics_list = assign_topic(topicos, data_list_frame.text)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"B3-5VgPZ9AZ-"},"source":["# Adicionando a coluna de tópicos ao dataframe\n","data_list_frame['topics'] = topics_list"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"o0gmYWBw_Qhe"},"source":["#data_list_frame"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"OFjQijBMA6FP"},"source":["import plotly.express as px\n","import plotly.offline as py\n","import plotly.graph_objs as go"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"geJ-GW5QBGg6"},"source":["data_list_frame['topics'].value_counts()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"LXd5-zodDvbB"},"source":["data_list_frame.topics.value_counts().plot(kind='pie', autopct='%.2f%%')\n","plt.axis('equal', )  # Para deixar o gráfico redondo"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"IXr1tDXbJrod"},"source":["#from google.colab import files\n","#import pandas as pd\n","#data_list_frame.to_csv('data_list_frame.csv')\n","#files.download('data_list_frame.csv')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"iq4Aozg7sXmb"},"source":["#Aprendizado"]},{"cell_type":"code","metadata":{"id":"_-fTrytgrl0e"},"source":["#emocao"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Os2Gy6-fzHyu"},"source":["# remoção de células vazias NaN\n","emocao = emocao[emocao['text'].notnull()]\n","emocao = emocao[emocao['topics'].notnull()]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"HEg0do8FrubV"},"source":["#removendo algumas colunas\n","emocao = emocao.drop(columns=['Unnamed: 0'], axis=1)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"7JZFVKDNreew"},"source":["base = emocao.values.tolist()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"HnaVF2txrIr2"},"source":["#base"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"M9JT2yzzrisi"},"source":["print(base[1])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"OQG8H6OZusA-"},"source":["from nltk.stem import PorterStemmer\n","from nltk.tokenize import word_tokenize\n","from nltk.stem.snowball import SnowballStemmer"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"LoEf7baJtO-h"},"source":["#Aplicando stemmer\n","def aplicastemmer(texto):\n","  stemmer =SnowballStemmer(\"english\")\n","  frasesstemming = []\n","  for (palavras, emocao) in texto:\n","    comstemming = [str(stemmer.stem(p)) for p in palavras.split() if p not in stopwords]\n","    frasesstemming.append((comstemming, emocao))\n","  return frasesstemming"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Cbs9JZV6vgqO"},"source":["frases_com_stemming_treinamento = aplicastemmer(base)\n","print(frases_com_stemming_treinamento)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"6-Lve4i_vmg8"},"source":["#Buscando palavras da base\n","def buscapalavras(frases):\n","  todas_palavras = []\n","  for (palavras, emocao) in frases:\n","    todas_palavras.extend(palavras)\n","  return todas_palavras"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"-jh0fsmIz3In"},"source":["palavras = buscapalavras(frases_com_stemming_treinamento)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"gJ5gjUtAz7Dr"},"source":["print(palavras)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"CyaX6zIkz8uD"},"source":["#Buscando palavras únicas\n","def busca_freq(palavras):\n","  palavras = nltk.FreqDist(palavras)\n","  return palavras"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"1gzTTJFG0bOp"},"source":["frequencia = busca_freq(palavras)\n","print(frequencia.most_common(50))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Mu6mf5Xj0ikY"},"source":["def busca_unicas(frequencia):\n","  freq = frequencia.keys()\n","  return freq"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"16QK9ntP1Gte"},"source":["palavras_unicas = busca_unicas(frequencia)\n","print(palavras_unicas)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"89yPhI911MXN"},"source":["#extração de palavras das frases\n","def extratorpalavras(documento):\n","  doc = set(documento)\n","  caracteristicas = {}\n","  for palavras in palavras_unicas:\n","    caracteristicas['%s' % palavras] = (palavras in doc)\n","  return caracteristicas"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"G0WWd2Ka2ARD"},"source":["caracteristicas_frase = extratorpalavras(['space', 'creat'])\n","print(caracteristicas_frase)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"sAJqk9Ct2O7H"},"source":["#base com extração de caracteristicas\n","base_completa = nltk.classify.apply_features(extratorpalavras, frases_com_stemming_treinamento)\n","base_completa"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"sjfaYMiK5AhW"},"source":["# Classificador"]},{"cell_type":"markdown","metadata":{"id":"IIEIVUgZW9Xv"},"source":["##Naive Bayes"]},{"cell_type":"code","metadata":{"id":"kjxM3QzV4AfH"},"source":["#constroi a tabela de probabilidade\n","classificador = nltk.NaiveBayesClassifier.train(base_completa)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"zjE_IoB34_HO"},"source":["print(classificador.labels())"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ycES7bA2XZ4_"},"source":["print(classificador.show_most_informative_features(10))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"B2qEsgWRYUX_"},"source":["#teste = 'U GUYS ARE SO FKIGN RETARDED I CANT BELIEVE THIS'"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ovWhrTeEXdO_"},"source":["#stemmer =SnowballStemmer(\"english\")\n","#teste_steamming = []\n","#for (palavras) in teste.split():\n","#  comstem = [p for p in palavras.split()]\n","#  teste_steamming.append(str(stemmer.stem(comstem[0])))\n","#print(teste_steamming)\n","\n","# -- data_list_frame -> tem todas as frases do data + topicos\n","#Aplicando stemmer\n","#def aplicastemmer(texto):\n","#  stemmer =SnowballStemmer(\"english\")\n","#  frasesstemming = []\n","#  for (palavras) in texto.split():\n","#    comstemming = [str(stemmer.stem(p)) for p in palavras.split() if p not in stopwords]\n","#    frasesstemming.append((comstemming))\n","#  return frasesstemming"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"6g-Sj6zoY2bP"},"source":["#novo = extratorpalavras(teste_steamming)\n","#print(novo)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"eOHBWZ8FZJu-"},"source":["#print(classificador.classify(novo))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"kNj4fbSzZXKd"},"source":["#distribuicao = classificador.prob_classify(novo)\n","#for classe in distribuicao.samples():\n","#  print(\"%s: %f\" % (classe, distribuicao.prob(classe)))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Lh4MBhF7aFZx"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Czs24uLUe_fC"},"source":["# Avaliação do classificador"]},{"cell_type":"code","metadata":{"id":"XAoDB96uPL8j"},"source":["data_list_frame = data_list_frame[data_list_frame['text'].notnull()]\n","data_list_frame = data_list_frame[data_list_frame['topics'].notnull()]\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"tlq6BV-wfDHP"},"source":["base_teste = data_list_frame.values.tolist()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"hPHHD8UQgPw5"},"source":["#base_teste"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"2y8rJMBzPhVx"},"source":["frases_com_stemming_teste = aplicastemmer(base_teste)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"IIM-ZnOjPmYn"},"source":["palavras_teste = buscapalavras(frases_com_stemming_teste)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"m2bS9MfZP1cm"},"source":["frequencia_teste = busca_freq(palavras_teste)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ahW9vgv2P6VW"},"source":["palavras_unicas_teste = busca_unicas(frequencia_teste)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"aMQq__5aQRjj"},"source":["base_completa_teste = nltk.classify.apply_features(extratorpalavras, frases_com_stemming_teste)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"IxIa8pj-Qblb"},"source":["print(nltk.classify.accuracy(classificador, base_completa_teste))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Gv_gISzpuZa7"},"source":["from nltk.metrics import ConfusionMatrix"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"jN2yxRX4udH5"},"source":["esperado = []\n","previsto = []\n","for (frase, topic) in base_completa_teste:\n","  resultado = classificador.classify(frase)\n","  previsto.append(resultado)\n","  esperado.append(topic)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"lyDnIITzud6Y"},"source":["matriz_confusao = ConfusionMatrix(esperado, previsto)\n","print(matriz_confusao)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"JkEaBP2XufMw"},"source":[""],"execution_count":null,"outputs":[]}]}